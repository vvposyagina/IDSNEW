//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserInterface.ManagerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ManagerService.IManagerService", CallbackContract=typeof(UserInterface.ManagerService.IManagerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IManagerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/Start")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/Start")]
        System.Threading.Tasks.Task StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/StartCollectors")]
        void StartCollectors(string[] devicesNames, string[] sources, bool net, string filter, bool host, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/StartCollectors")]
        System.Threading.Tasks.Task StartCollectorsAsync(string[] devicesNames, string[] sources, bool net, string filter, bool host, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/Stop")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/Stop")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/Pause")]
        void Pause(string[] nCollectors, string[] hCollectors);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/Pause")]
        System.Threading.Tasks.Task PauseAsync(string[] nCollectors, string[] hCollectors);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/StartNetDataCollector")]
        void StartNetDataCollector(string[] devicesNames, string filter, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/StartNetDataCollector")]
        System.Threading.Tasks.Task StartNetDataCollectorAsync(string[] devicesNames, string filter, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StopNetDataCollector", ReplyAction="http://tempuri.org/IManagerService/StopNetDataCollectorResponse")]
        void StopNetDataCollector();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StopNetDataCollector", ReplyAction="http://tempuri.org/IManagerService/StopNetDataCollectorResponse")]
        System.Threading.Tasks.Task StopNetDataCollectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetDevicesList", ReplyAction="http://tempuri.org/IManagerService/GetDevicesListResponse")]
        string[] GetDevicesList();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetDevicesList", ReplyAction="http://tempuri.org/IManagerService/GetDevicesListResponse")]
        System.Threading.Tasks.Task<string[]> GetDevicesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StartHostDataCollector", ReplyAction="http://tempuri.org/IManagerService/StartHostDataCollectorResponse")]
        void StartHostDataCollector(string[] sources, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StartHostDataCollector", ReplyAction="http://tempuri.org/IManagerService/StartHostDataCollectorResponse")]
        System.Threading.Tasks.Task StartHostDataCollectorAsync(string[] sources, bool mode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StopHostDataCollector", ReplyAction="http://tempuri.org/IManagerService/StopHostDataCollectorResponse")]
        void StopHostDataCollector();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/StopHostDataCollector", ReplyAction="http://tempuri.org/IManagerService/StopHostDataCollectorResponse")]
        System.Threading.Tasks.Task StopHostDataCollectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/RequestRetraining", ReplyAction="http://tempuri.org/IManagerService/RequestRetrainingResponse")]
        double[] RequestRetraining(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/RequestRetraining", ReplyAction="http://tempuri.org/IManagerService/RequestRetrainingResponse")]
        System.Threading.Tasks.Task<double[]> RequestRetrainingAsync(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/UpdateNeuralNetwork")]
        void UpdateNeuralNetwork(string goal);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IManagerService/UpdateNeuralNetwork")]
        System.Threading.Tasks.Task UpdateNeuralNetworkAsync(string goal);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetNetData", ReplyAction="http://tempuri.org/IManagerService/GetNetDataResponse")]
        string[][] GetNetData();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetNetData", ReplyAction="http://tempuri.org/IManagerService/GetNetDataResponse")]
        System.Threading.Tasks.Task<string[][]> GetNetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetHostData", ReplyAction="http://tempuri.org/IManagerService/GetHostDataResponse")]
        string[][] GetHostData();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetHostData", ReplyAction="http://tempuri.org/IManagerService/GetHostDataResponse")]
        System.Threading.Tasks.Task<string[][]> GetHostDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetNNData", ReplyAction="http://tempuri.org/IManagerService/GetNNDataResponse")]
        string[][] GetNNData();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/GetNNData", ReplyAction="http://tempuri.org/IManagerService/GetNNDataResponse")]
        System.Threading.Tasks.Task<string[][]> GetNNDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddNetData", ReplyAction="http://tempuri.org/IManagerService/AddNetDataResponse")]
        void AddNetData(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddNetData", ReplyAction="http://tempuri.org/IManagerService/AddNetDataResponse")]
        System.Threading.Tasks.Task AddNetDataAsync(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddHostData", ReplyAction="http://tempuri.org/IManagerService/AddHostDataResponse")]
        void AddHostData(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddHostData", ReplyAction="http://tempuri.org/IManagerService/AddHostDataResponse")]
        System.Threading.Tasks.Task AddHostDataAsync(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddNNData", ReplyAction="http://tempuri.org/IManagerService/AddNNDataResponse")]
        void AddNNData(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IManagerService/AddNNData", ReplyAction="http://tempuri.org/IManagerService/AddNNDataResponse")]
        System.Threading.Tasks.Task AddNNDataAsync(string[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/HandleHostWarning")]
        void HandleHostWarning(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/HandleNetWarning")]
        void HandleNetWarning(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/GetMessageOFF")]
        void GetMessageOFF();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IManagerService/GetMessageOK")]
        void GetMessageOK();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerServiceChannel : UserInterface.ManagerService.IManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerServiceClient : System.ServiceModel.DuplexClientBase<UserInterface.ManagerService.IManagerService>, UserInterface.ManagerService.IManagerService {
        
        public ManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public void StartCollectors(string[] devicesNames, string[] sources, bool net, string filter, bool host, bool mode) {
            base.Channel.StartCollectors(devicesNames, sources, net, filter, host, mode);
        }
        
        public System.Threading.Tasks.Task StartCollectorsAsync(string[] devicesNames, string[] sources, bool net, string filter, bool host, bool mode) {
            return base.Channel.StartCollectorsAsync(devicesNames, sources, net, filter, host, mode);
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void Pause(string[] nCollectors, string[] hCollectors) {
            base.Channel.Pause(nCollectors, hCollectors);
        }
        
        public System.Threading.Tasks.Task PauseAsync(string[] nCollectors, string[] hCollectors) {
            return base.Channel.PauseAsync(nCollectors, hCollectors);
        }
        
        public void StartNetDataCollector(string[] devicesNames, string filter, bool mode) {
            base.Channel.StartNetDataCollector(devicesNames, filter, mode);
        }
        
        public System.Threading.Tasks.Task StartNetDataCollectorAsync(string[] devicesNames, string filter, bool mode) {
            return base.Channel.StartNetDataCollectorAsync(devicesNames, filter, mode);
        }
        
        public void StopNetDataCollector() {
            base.Channel.StopNetDataCollector();
        }
        
        public System.Threading.Tasks.Task StopNetDataCollectorAsync() {
            return base.Channel.StopNetDataCollectorAsync();
        }
        
        public string[] GetDevicesList() {
            return base.Channel.GetDevicesList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetDevicesListAsync() {
            return base.Channel.GetDevicesListAsync();
        }
        
        public void StartHostDataCollector(string[] sources, bool mode) {
            base.Channel.StartHostDataCollector(sources, mode);
        }
        
        public System.Threading.Tasks.Task StartHostDataCollectorAsync(string[] sources, bool mode) {
            return base.Channel.StartHostDataCollectorAsync(sources, mode);
        }
        
        public void StopHostDataCollector() {
            base.Channel.StopHostDataCollector();
        }
        
        public System.Threading.Tasks.Task StopHostDataCollectorAsync() {
            return base.Channel.StopHostDataCollectorAsync();
        }
        
        public double[] RequestRetraining(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer) {
            return base.Channel.RequestRetraining(trainingFileName, testFileName, goal, epochCount, neuronCountInHiddenLayer);
        }
        
        public System.Threading.Tasks.Task<double[]> RequestRetrainingAsync(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer) {
            return base.Channel.RequestRetrainingAsync(trainingFileName, testFileName, goal, epochCount, neuronCountInHiddenLayer);
        }
        
        public void UpdateNeuralNetwork(string goal) {
            base.Channel.UpdateNeuralNetwork(goal);
        }
        
        public System.Threading.Tasks.Task UpdateNeuralNetworkAsync(string goal) {
            return base.Channel.UpdateNeuralNetworkAsync(goal);
        }
        
        public string[][] GetNetData() {
            return base.Channel.GetNetData();
        }
        
        public System.Threading.Tasks.Task<string[][]> GetNetDataAsync() {
            return base.Channel.GetNetDataAsync();
        }
        
        public string[][] GetHostData() {
            return base.Channel.GetHostData();
        }
        
        public System.Threading.Tasks.Task<string[][]> GetHostDataAsync() {
            return base.Channel.GetHostDataAsync();
        }
        
        public string[][] GetNNData() {
            return base.Channel.GetNNData();
        }
        
        public System.Threading.Tasks.Task<string[][]> GetNNDataAsync() {
            return base.Channel.GetNNDataAsync();
        }
        
        public void AddNetData(string[] data) {
            base.Channel.AddNetData(data);
        }
        
        public System.Threading.Tasks.Task AddNetDataAsync(string[] data) {
            return base.Channel.AddNetDataAsync(data);
        }
        
        public void AddHostData(string[] data) {
            base.Channel.AddHostData(data);
        }
        
        public System.Threading.Tasks.Task AddHostDataAsync(string[] data) {
            return base.Channel.AddHostDataAsync(data);
        }
        
        public void AddNNData(string[] data) {
            base.Channel.AddNNData(data);
        }
        
        public System.Threading.Tasks.Task AddNNDataAsync(string[] data) {
            return base.Channel.AddNNDataAsync(data);
        }
    }
}
