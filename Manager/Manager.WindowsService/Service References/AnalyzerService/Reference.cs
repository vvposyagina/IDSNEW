//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Manager.WindowsService.AnalyzerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnalyzerService.IAnalyzer", CallbackContract=typeof(Manager.WindowsService.AnalyzerService.IAnalyzerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAnalyzer {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/StartService")]
        void StartService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/StartService")]
        System.Threading.Tasks.Task StartServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/CheckNetPackets")]
        void CheckNetPackets(string[] packets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/CheckNetPackets")]
        System.Threading.Tasks.Task CheckNetPacketsAsync(string[] packets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/CheckHostPackets")]
        void CheckHostPackets(string[] packets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/CheckHostPackets")]
        System.Threading.Tasks.Task CheckHostPacketsAsync(string[] packets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IAnalyzer/Stop")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IAnalyzer/Stop")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IAnalyzer/CreateNewNN", ReplyAction="http://tempuri.org/IAnalyzer/CreateNewNNResponse")]
        double[] CreateNewNN(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IAnalyzer/CreateNewNN", ReplyAction="http://tempuri.org/IAnalyzer/CreateNewNNResponse")]
        System.Threading.Tasks.Task<double[]> CreateNewNNAsync(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IAnalyzer/ChangeNN")]
        void ChangeNN();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IAnalyzer/ChangeNN")]
        System.Threading.Tasks.Task ChangeNNAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnalyzerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/GenerateNetWarning")]
        void GenerateNetWarning(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/GenerateHostWarning")]
        void GenerateHostWarning(string[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/GoToArchiveMode")]
        void GoToArchiveMode();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/SendOK")]
        void SendOK();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnalyzer/ResumeAnalyze")]
        void ResumeAnalyze();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnalyzerChannel : Manager.WindowsService.AnalyzerService.IAnalyzer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnalyzerClient : System.ServiceModel.DuplexClientBase<Manager.WindowsService.AnalyzerService.IAnalyzer>, Manager.WindowsService.AnalyzerService.IAnalyzer {
        
        public AnalyzerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AnalyzerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AnalyzerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AnalyzerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AnalyzerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartService() {
            base.Channel.StartService();
        }
        
        public System.Threading.Tasks.Task StartServiceAsync() {
            return base.Channel.StartServiceAsync();
        }
        
        public void CheckNetPackets(string[] packets) {
            base.Channel.CheckNetPackets(packets);
        }
        
        public System.Threading.Tasks.Task CheckNetPacketsAsync(string[] packets) {
            return base.Channel.CheckNetPacketsAsync(packets);
        }
        
        public void CheckHostPackets(string[] packets) {
            base.Channel.CheckHostPackets(packets);
        }
        
        public System.Threading.Tasks.Task CheckHostPacketsAsync(string[] packets) {
            return base.Channel.CheckHostPacketsAsync(packets);
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public double[] CreateNewNN(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer) {
            return base.Channel.CreateNewNN(trainingFileName, testFileName, goal, epochCount, neuronCountInHiddenLayer);
        }
        
        public System.Threading.Tasks.Task<double[]> CreateNewNNAsync(string trainingFileName, string testFileName, string goal, int epochCount, int neuronCountInHiddenLayer) {
            return base.Channel.CreateNewNNAsync(trainingFileName, testFileName, goal, epochCount, neuronCountInHiddenLayer);
        }
        
        public void ChangeNN() {
            base.Channel.ChangeNN();
        }
        
        public System.Threading.Tasks.Task ChangeNNAsync() {
            return base.Channel.ChangeNNAsync();
        }
    }
}
